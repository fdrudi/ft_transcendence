import type { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import { getProviders, signIn } from "next-auth/react"
import { getServerSession } from "next-auth/next"
import NextAuth from "./api/auth/[...nextauth]";
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import styled from '@emotion/styled';
import { ModalTemplate } from "@/components/templates";
import { ButtonIcon, ButtonText, TextSeparator } from "@/components/atoms";
import { GoogleIcon, Icon42 } from "../../public/Icons";

const AuthOptions = styled.div`
  width: calc(100% - 40px);
  display: grid;
  grid-template-columns: 33% 34% 33%;
  gap: 20px;
  padding: 10px;
`;

export default function SignIn({ providers }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
     <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <ModalTemplate onSubmit={( event ) => (event.preventDefault())}>
          <AuthOptions>
            <ButtonIcon onClick={() => signIn("google")}>
              <GoogleIcon />
            </ButtonIcon>
            <ButtonIcon onClick={() => signIn("42-school")}>
              <Icon42 />
            </ButtonIcon>
            <ButtonIcon onClick={() => signIn("github")}>
              <GoogleIcon />
            </ButtonIcon>
          </AuthOptions>
          <TextSeparator text="Or create an account" />

          <ButtonText text="Login" />
        </ModalTemplate>
      </main>
    </>
  )
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, NextAuth);
  
  // If the user is already logged in, redirect.
  // Note: Make sure not to redirect to the same page
  // To avoid an infinite loop!
  if (session) {
    return { redirect: { destination: "/" } };
  }

  const providers = await getProviders();
  
  return {
    props: { providers: providers ?? [] },
  }
}
